geom_point(size = 2) +
scale_x_reverse() +
scale_color_brewer(palette = "Spectral") +
facet_wrap(~ par) +
labs(x = "Population Subsample (%)",
y = "Median Explained Variance (%)",
color = "Method",
title = "Total Cognition") +
theme_minimal(base_size = 18) +
coord_cartesian(ylim = c(0, 0.2)) +
theme(
strip.text = element_text(face = "bold", size = 20),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.line.y.right = element_blank(),
axis.line.x.top = element_blank()
)
# 850 x 556
# Plot them
crystal_dt <- copy(dt_full)
crystal_dt[, c("median", "IQR") := tstrsplit(expvar_Total, " \\(|\\)", type.convert = TRUE)]
ggplot(crystal_dt, aes(x = pop, y = median, color = Method, group = Method)) +
geom_line(linewidth = 1.2) +
geom_point(size = 2) +
scale_x_reverse() +
scale_color_brewer(palette = "Spectral") +
facet_wrap(~ par) +
labs(x = "Population Subsample (%)",
y = "Median Explained Variance (%)",
color = "Method",
title = "Total Cognition") +
theme_minimal(base_size = 18) +
coord_cartesian(ylim = c(0, 0.2)) +
theme(
strip.text = element_text(face = "bold", size = 20),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.line.y.right = element_blank(),
axis.line.x.top = element_blank()
)
# 850 x 556
rm(list=ls())
library(data.table)
library(stringr)
library(ggplot2)
# Set the folder path
folder_path <- "~/Documents/Cornell/Projects/FC_SC/JSM/Output"
# List all files (adjust pattern if needed)
file_list <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# Initialize empty data.table
dt_full <- data.table()
# Loop to read and stack
for (file in file_list) {
print(file)
dt <- data.table(fread(file, header=TRUE))
file_name <- basename(file)
dt[, pop := str_extract(file_name, "\\d{2}%")]
dt_full <- rbind(dt_full, dt, fill = TRUE)
}
dt_full[is.na(pop), pop := 100]
dt_full[, pop := as.numeric(gsub("\\%", "", pop))]
dt_full[, method := str_extract(Predictor, "FC|GL|PC|TK")]
dt_full[, par := str_extract(Predictor, "268|86")]
dt_full[, par := ifelse(par=="268", "SHEN 268", "FS 86")]
dt_full[, Method := ifelse(method=="FC", "Pearson",
ifelse(method=="GL", "GLASSO",
ifelse(method=="TK", "Tikinov", "Partial")))]
dt_full[, Method := factor(Method, levels = c("GLASSO", "Pearson", "Partial", "Tikinov"))]
# Plot them
crystal_dt <- copy(dt_full)
crystal_dt[, c("median", "IQR") := tstrsplit(expvar_Total, " \\(|\\)", type.convert = TRUE)]
ggplot(crystal_dt, aes(x = pop, y = median, color = Method, group = Method)) +
geom_line(linewidth = 1.2) +
geom_point(size = 2) +
scale_x_reverse() +
scale_color_brewer(palette = "Spectral") +
facet_wrap(~ par) +
labs(x = "Population Subsample (%)",
y = "Median Explained Variance (%)",
color = "Method",
title = "Total Cognition") +
theme_minimal(base_size = 18) +
coord_cartesian(ylim = c(0, 0.2)) +
theme(
strip.text = element_text(face = "bold", size = 20),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.line.y.right = element_blank(),
axis.line.x.top = element_blank()
)
# 850 x 556
# Plot them
crystal_dt <- copy(dt_full)
crystal_dt[, c("median", "IQR") := tstrsplit(expvar_Crystal, " \\(|\\)", type.convert = TRUE)]
ggplot(crystal_dt, aes(x = pop, y = median, color = Method, group = Method)) +
geom_line(linewidth = 1.2) +
geom_point(size = 2) +
scale_x_reverse() +
scale_color_brewer(palette = "Spectral") +
facet_wrap(~ par) +
labs(x = "Population Subsample (%)",
y = "Median Explained Variance (%)",
color = "Method",
title = "Crystal Cognition") +
theme_minimal(base_size = 18) +
coord_cartesian(ylim = c(0, 0.2)) +
theme(
strip.text = element_text(face = "bold", size = 20),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.line.y.right = element_blank(),
axis.line.x.top = element_blank()
)
# 850 x 556
# Plot them
crystal_dt <- copy(dt_full)
crystal_dt[, c("median", "IQR") := tstrsplit(expvar_Fluid, " \\(|\\)", type.convert = TRUE)]
ggplot(crystal_dt, aes(x = pop, y = median, color = Method, group = Method)) +
geom_line(linewidth = 1.2) +
geom_point(size = 2) +
scale_x_reverse() +
scale_color_brewer(palette = "Spectral") +
facet_wrap(~ par) +
labs(x = "Population Subsample (%)",
y = "Median Explained Variance (%)",
color = "Method",
title = "Fluid Cognition") +
theme_minimal(base_size = 18) +
coord_cartesian(ylim = c(0, 0.2)) +
theme(
strip.text = element_text(face = "bold", size = 20),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.line.y.right = element_blank(),
axis.line.x.top = element_blank()
)
# 850 x 556
#------------------------------
#---------- line plot
#------------------------------
rm(list=ls())
library(data.table)
library(stringr)
library(ggplot2)
# Set the folder path
folder_path <- "~/Documents/Cornell/Projects/FC_SC/JSM/Output"
# List all files (adjust pattern if needed)
file_list <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# Initialize empty data.table
dt_full <- data.table()
# Loop to read and stack
for (file in file_list) {
print(file)
dt <- data.table(fread(file, header=TRUE))
file_name <- basename(file)
dt[, pop := str_extract(file_name, "\\d{2}%")]
dt_full <- rbind(dt_full, dt, fill = TRUE)
}
dt_full[is.na(pop), pop := 100]
dt_full[, pop := as.numeric(gsub("\\%", "", pop))]
dt_full[, method := str_extract(Predictor, "FC|GL|PC|TK")]
dt_full[, par := str_extract(Predictor, "268|86")]
dt_full[, par := ifelse(par=="268", "SHEN 268", "FS 86")]
dt_full[, Method := ifelse(method=="FC", "Pearson",
ifelse(method=="GL", "GLASSO",
ifelse(method=="TK", "Tikinov", "Partial")))]
dt_full[, Method := factor(Method, levels = c("GLASSO", "Pearson", "Partial", "Tikinov"))]
# Plot them
crystal_dt <- copy(dt_full)
crystal_dt[, c("median", "IQR") := tstrsplit(expvar_Fluid, " \\(|\\)", type.convert = TRUE)]
ggplot(crystal_dt, aes(x = pop, y = median, color = Method, group = Method)) +
geom_line(linewidth = 1.2) +
geom_point(size = 2) +
scale_x_reverse() +
scale_color_brewer(palette = "Spectral") +
facet_wrap(~ par) +
labs(x = "Population Subsample (%)",
y = "Median Explained Variance (%)",
color = "Method",
title = "Fluid Cognition") +
theme_minimal(base_size = 18) +
coord_cartesian(ylim = c(0, 0.2)) +
theme(
strip.text = element_text(face = "bold", size = 20),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.line.y.right = element_blank(),
axis.line.x.top = element_blank()
)
# 850 x 556
# Plot them
crystal_dt <- copy(dt_full)
crystal_dt[, c("median", "IQR") := tstrsplit(expvar_Crystal, " \\(|\\)", type.convert = TRUE)]
ggplot(crystal_dt, aes(x = pop, y = median, color = Method, group = Method)) +
geom_line(linewidth = 1.2) +
geom_point(size = 2) +
scale_x_reverse() +
scale_color_brewer(palette = "Spectral") +
facet_wrap(~ par) +
labs(x = "Population Subsample (%)",
y = "Median Explained Variance (%)",
color = "Method",
title = "Crystal Cognition") +
theme_minimal(base_size = 18) +
coord_cartesian(ylim = c(0, 0.2)) +
theme(
strip.text = element_text(face = "bold", size = 20),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.line.y.right = element_blank(),
axis.line.x.top = element_blank()
)
# 850 x 556
# Plot them
crystal_dt <- copy(dt_full)
crystal_dt[, c("median", "IQR") := tstrsplit(expvar_Total, " \\(|\\)", type.convert = TRUE)]
ggplot(crystal_dt, aes(x = pop, y = median, color = Method, group = Method)) +
geom_line(linewidth = 1.2) +
geom_point(size = 2) +
scale_x_reverse() +
scale_color_brewer(palette = "Spectral") +
facet_wrap(~ par) +
labs(x = "Population Subsample (%)",
y = "Median Explained Variance (%)",
color = "Method",
title = "Total Cognition") +
theme_minimal(base_size = 18) +
coord_cartesian(ylim = c(0, 0.2)) +
theme(
strip.text = element_text(face = "bold", size = 20),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.line.y.right = element_blank(),
axis.line.x.top = element_blank()
)
# 850 x 556
# Plot them
crystal_dt <- copy(dt_full)
crystal_dt[, c("median", "IQR") := tstrsplit(expvar_Crystal, " \\(|\\)", type.convert = TRUE)]
ggplot(crystal_dt, aes(x = pop, y = median, color = Method, group = Method)) +
geom_line(linewidth = 1.2) +
geom_point(size = 2) +
scale_x_reverse() +
scale_color_brewer(palette = "Spectral") +
facet_wrap(~ par) +
labs(x = "Population Subsample (%)",
y = "Median Explained Variance (%)",
color = "Method",
title = "Crystal Cognition") +
theme_minimal(base_size = 18) +
coord_cartesian(ylim = c(0, 0.2)) +
theme(
strip.text = element_text(face = "bold", size = 20),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.line.y.right = element_blank(),
axis.line.x.top = element_blank()
)
# 850 x 556
# Plot them
crystal_dt <- copy(dt_full)
crystal_dt[, c("median", "IQR") := tstrsplit(expvar_Fluid, " \\(|\\)", type.convert = TRUE)]
ggplot(crystal_dt, aes(x = pop, y = median, color = Method, group = Method)) +
geom_line(linewidth = 1.2) +
geom_point(size = 2) +
scale_x_reverse() +
scale_color_brewer(palette = "Spectral") +
facet_wrap(~ par) +
labs(x = "Population Subsample (%)",
y = "Median Explained Variance (%)",
color = "Method",
title = "Fluid Cognition") +
theme_minimal(base_size = 18) +
coord_cartesian(ylim = c(0, 0.2)) +
theme(
strip.text = element_text(face = "bold", size = 20),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.line.y.right = element_blank(),
axis.line.x.top = element_blank()
)
# 850 x 556
# Plot them
crystal_dt <- copy(dt_full)
crystal_dt[, c("median", "IQR") := tstrsplit(expvar_Crystal, " \\(|\\)", type.convert = TRUE)]
ggplot(crystal_dt, aes(x = pop, y = median, color = Method, group = Method)) +
geom_line(linewidth = 1.2) +
geom_point(size = 2) +
scale_x_reverse() +
scale_color_brewer(palette = "Spectral") +
facet_wrap(~ par) +
labs(x = "Population Subsample (%)",
y = "Median Explained Variance (%)",
color = "Method",
title = "Crystal Cognition") +
theme_minimal(base_size = 18) +
coord_cartesian(ylim = c(0, 0.2)) +
theme(
strip.text = element_text(face = "bold", size = 20),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.line.y.right = element_blank(),
axis.line.x.top = element_blank()
)
# 850 x 556
((4+3+2+1)+(3+2+1)+(2+1)+1)/6^3
5/54
(1/2)/(0.5 + 0.5^6)
1 - (1/3)^3
a = 1 - (1/3)^3
(a * 0.25) / (a*0.25 + (1-a)*0.75)
8/11
a1 = 1/36
a6 = 1/36
a2 = 2*(1/6)*(2/6)
a2
a3 = 2*(1/6)*(3/6)
a4 = 2*(1/6)*(4/6)
a5 = 2*(1/6)*(5/6)
a1 + a2 + a3 + a4+ a5+a6
a2 = 2*(1/6)*(1/6) + (1/36)
a2
a3
a3 = 2*(1/6)*(2/6) + (1/36)
a3
a4 = 2*(1/6)*(3/6) + (1/36)
a5 = 2*(1/6)*(4/6) + (1/36)
a6 = 2*(1/6)*(5/6) + (1/36)
a1 + a2 + a3 + a4 + a5
a1 + a2 + a3 + a4 + a5 + a6
1*a1 + 2*a2 + 3*a3 + 4*a4 + 5*a5 + 6*a6
161/36
1/2.5
1/0.025
1 - (1/100 + 98*((1/100)*(1/97)))
(2^5)/(1+2^5)
2^5
1 - 2*0.4*0.6
0.36/0.52
2/3 + 4/9*(2+3)
2.888889*3/2
1/0.025
ph = 550/1000
p = 1/2
(ph-p)/(sqrt(p(1-p))/1000)
(ph-p)/(sqrt(p*(1-p))/1000)
(ph-p)/(sqrt(p*(1-p))/1000)
(ph-p)/(sqrt(p*(1-p)/1000))
797.63 - 52.13
64.5 + 204.43+100
86+75.73
64.5+21.86
368.93+161.73+86.36+180.61
a = (1000-980)/1000
a
b = (2000-1950)/2000
b
(1/3)*a / ((1/3)*a + (2/3)*b)
60*.8
60 - 48
.1*40
40-4
46/12
26/3
46/3
46/4
46/2
1/3*((4 - 1)^2 + (1-2)^2 + (5/2-1)^2)
36/10
25/12
10/5
49/12
50*40*4
8*12
60*40*4
9600*12
?scale
setwd("~/Documents/Cornell/Projects/FC_SC/Code/Rpack/ATTglasso")
devtools::document()
devtools::build()
library(ATTglasso)
#---------- Load libraries ----------#
library(MASS)
library(corrplot)
#---------- Simulate data ----------#
set.seed(1)
p <- 20
n <- 100
choose(p,2)
data.name <- paste0("band1_p", p, "_n",n)
Theta <- matrix(data=0, nrow=p, ncol=p)
diag(Theta) <- 1
offd1 <- 0.3
diag(Theta[1:(p-1), 2:p]) <- offd1
diag(Theta[2:p, 1:(p-1)]) <- offd1
eigen(Theta)$values
Sigma <- solve(Theta)
diag(Sigma)
eigen(Sigma)$values
if (min(eigen(Sigma)$values)<=1e-3) {
stop("Sigma is not positive definite")
}
X <- mvrnorm(n=n, mu=rep(0,p), Sigma=Sigma)
corrplot(cov2cor(Theta), method = "color", tl.pos="n")
n = nrow(X)
p = ncol(X)
S = t(X)%*%X/n
sigma2.hat = diag(S)
W.old = W = S; Theta = array(0, c(p,p))
e.old = 1e6
final.cycle = FALSE
lambda0 <- numeric(p)
lambda <- numeric(p)
iter = 1
j = 1
W.11 = W[-j,-j]
s.12 = S[-j,j]
s.22 = S[j,j]
out <- glasso_autotune(X = X, verbose_i=TRUE)
out <- large(X = X, verbose=TRUE)
getwd()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
unlink("LARGE.Rcheck", recursive = TRUE)
unlink("LARGE/Meta", recursive = TRUE)
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
unlink("LARGE.Rcheck", recursive = TRUE)
devtools::document()
devtools::install()
