// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lasso_autotune
List lasso_autotune(const arma::mat& X_X, const arma::colvec& X_Y, const arma::uvec& r_XY, const arma::vec& lambdas, double sigma2, int n, double s_22, const arma::colvec& y, const arma::mat& Z, int node, int outer_iter, double alpha, const arma::vec& F_crit_values, double lambda0, bool verbose_i, bool penalize_diag);
RcppExport SEXP _large_lasso_autotune(SEXP X_XSEXP, SEXP X_YSEXP, SEXP r_XYSEXP, SEXP lambdasSEXP, SEXP sigma2SEXP, SEXP nSEXP, SEXP s_22SEXP, SEXP ySEXP, SEXP ZSEXP, SEXP nodeSEXP, SEXP outer_iterSEXP, SEXP alphaSEXP, SEXP F_crit_valuesSEXP, SEXP lambda0SEXP, SEXP verbose_iSEXP, SEXP penalize_diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_X(X_XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type X_Y(X_YSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type r_XY(r_XYSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type s_22(s_22SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< int >::type outer_iter(outer_iterSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type F_crit_values(F_crit_valuesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< bool >::type verbose_i(verbose_iSEXP);
    Rcpp::traits::input_parameter< bool >::type penalize_diag(penalize_diagSEXP);
    rcpp_result_gen = Rcpp::wrap(lasso_autotune(X_X, X_Y, r_XY, lambdas, sigma2, n, s_22, y, Z, node, outer_iter, alpha, F_crit_values, lambda0, verbose_i, penalize_diag));
    return rcpp_result_gen;
END_RCPP
}
// large
List large(const arma::mat& X, double alpha, double penalize_diag, double thr, int maxit, bool verbose, bool verbose_i);
RcppExport SEXP _large_large(SEXP XSEXP, SEXP alphaSEXP, SEXP penalize_diagSEXP, SEXP thrSEXP, SEXP maxitSEXP, SEXP verboseSEXP, SEXP verbose_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type penalize_diag(penalize_diagSEXP);
    Rcpp::traits::input_parameter< double >::type thr(thrSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose_i(verbose_iSEXP);
    rcpp_result_gen = Rcpp::wrap(large(X, alpha, penalize_diag, thr, maxit, verbose, verbose_i));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_large_lasso_autotune", (DL_FUNC) &_large_lasso_autotune, 16},
    {"_large_large", (DL_FUNC) &_large_large, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_large(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
